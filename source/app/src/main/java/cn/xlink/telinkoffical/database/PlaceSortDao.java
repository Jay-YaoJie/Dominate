package cn.xlink.telinkoffical.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import cn.xlink.telinkoffical.bean.greenDao.PlaceSort;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PLACE_SORT".
*/
public class PlaceSortDao extends AbstractDao<PlaceSort, Long> {

    public static final String TABLENAME = "PLACE_SORT";

    /**
     * Properties of entity PlaceSort.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property MeshAddress = new Property(2, String.class, "meshAddress", false, "MESH_ADDRESS");
        public final static Property MeshKey = new Property(3, String.class, "meshKey", false, "MESH_KEY");
        public final static Property FactoryName = new Property(4, String.class, "factoryName", false, "FACTORY_NAME");
        public final static Property FactoryMeshKey = new Property(5, String.class, "factoryMeshKey", false, "FACTORY_MESH_KEY");
        public final static Property PlaceId = new Property(6, String.class, "placeId", false, "PLACE_ID");
        public final static Property CreatorAccount = new Property(7, String.class, "creatorAccount", false, "CREATOR_ACCOUNT");
        public final static Property CreatorName = new Property(8, String.class, "creatorName", false, "CREATOR_NAME");
        public final static Property CreatorId = new Property(9, String.class, "creatorId", false, "CREATOR_ID");
        public final static Property CreateDate = new Property(10, String.class, "createDate", false, "CREATE_DATE");
        public final static Property PlaceVersion = new Property(11, Long.class, "placeVersion", false, "PLACE_VERSION");
        public final static Property LastUseDate = new Property(12, String.class, "lastUseDate", false, "LAST_USE_DATE");
        public final static Property DeviceIdRecord = new Property(13, Integer.class, "deviceIdRecord", false, "DEVICE_ID_RECORD");
        public final static Property Role = new Property(14, Integer.class, "role", false, "ROLE");
        public final static Property Type = new Property(15, String.class, "Type", false, "TYPE");
    };


    public PlaceSortDao(DaoConfig config) {
        super(config);
    }
    
    public PlaceSortDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PLACE_SORT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"MESH_ADDRESS\" TEXT," + // 2: meshAddress
                "\"MESH_KEY\" TEXT," + // 3: meshKey
                "\"FACTORY_NAME\" TEXT," + // 4: factoryName
                "\"FACTORY_MESH_KEY\" TEXT," + // 5: factoryMeshKey
                "\"PLACE_ID\" TEXT," + // 6: placeId
                "\"CREATOR_ACCOUNT\" TEXT," + // 7: creatorAccount
                "\"CREATOR_NAME\" TEXT," + // 8: creatorName
                "\"CREATOR_ID\" TEXT," + // 9: creatorId
                "\"CREATE_DATE\" TEXT," + // 10: createDate
                "\"PLACE_VERSION\" INTEGER," + // 11: placeVersion
                "\"LAST_USE_DATE\" TEXT," + // 12: lastUseDate
                "\"DEVICE_ID_RECORD\" INTEGER," + // 13: deviceIdRecord
                "\"ROLE\" INTEGER," + // 14: role
                "\"TYPE\" TEXT);"); // 15: Type
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PLACE_SORT\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, PlaceSort entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String meshAddress = entity.getMeshAddress();
        if (meshAddress != null) {
            stmt.bindString(3, meshAddress);
        }
 
        String meshKey = entity.getMeshKey();
        if (meshKey != null) {
            stmt.bindString(4, meshKey);
        }
 
        String factoryName = entity.getFactoryName();
        if (factoryName != null) {
            stmt.bindString(5, factoryName);
        }
 
        String factoryMeshKey = entity.getFactoryMeshKey();
        if (factoryMeshKey != null) {
            stmt.bindString(6, factoryMeshKey);
        }
 
        String placeId = entity.getPlaceId();
        if (placeId != null) {
            stmt.bindString(7, placeId);
        }
 
        String creatorAccount = entity.getCreatorAccount();
        if (creatorAccount != null) {
            stmt.bindString(8, creatorAccount);
        }
 
        String creatorName = entity.getCreatorName();
        if (creatorName != null) {
            stmt.bindString(9, creatorName);
        }
 
        String creatorId = entity.getCreatorId();
        if (creatorId != null) {
            stmt.bindString(10, creatorId);
        }
 
        String createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindString(11, createDate);
        }
 
        Long placeVersion = entity.getPlaceVersion();
        if (placeVersion != null) {
            stmt.bindLong(12, placeVersion);
        }
 
        String lastUseDate = entity.getLastUseDate();
        if (lastUseDate != null) {
            stmt.bindString(13, lastUseDate);
        }
 
        Integer deviceIdRecord = entity.getDeviceIdRecord();
        if (deviceIdRecord != null) {
            stmt.bindLong(14, deviceIdRecord);
        }
 
        Integer role = entity.getRole();
        if (role != null) {
            stmt.bindLong(15, role);
        }
 
        String Type = entity.getType();
        if (Type != null) {
            stmt.bindString(16, Type);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public PlaceSort readEntity(Cursor cursor, int offset) {
        PlaceSort entity = new PlaceSort( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // meshAddress
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // meshKey
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // factoryName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // factoryMeshKey
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // placeId
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // creatorAccount
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // creatorName
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // creatorId
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // createDate
            cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11), // placeVersion
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // lastUseDate
            cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13), // deviceIdRecord
            cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14), // role
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15) // Type
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, PlaceSort entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMeshAddress(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMeshKey(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFactoryName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setFactoryMeshKey(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPlaceId(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCreatorAccount(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCreatorName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCreatorId(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setCreateDate(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setPlaceVersion(cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11));
        entity.setLastUseDate(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setDeviceIdRecord(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
        entity.setRole(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
        entity.setType(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(PlaceSort entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(PlaceSort entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
