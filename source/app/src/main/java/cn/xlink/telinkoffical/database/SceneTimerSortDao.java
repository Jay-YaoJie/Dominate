package cn.xlink.telinkoffical.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import cn.xlink.telinkoffical.bean.greenDao.SceneTimerSort;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SCENE_TIMER_SORT".
*/
public class SceneTimerSortDao extends AbstractDao<SceneTimerSort, Long> {

    public static final String TABLENAME = "SCENE_TIMER_SORT";

    /**
     * Properties of entity SceneTimerSort.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property SceneId = new Property(1, Integer.class, "sceneId", false, "SCENE_ID");
        public final static Property SceneTimerId = new Property(2, Integer.class, "sceneTimerId", false, "SCENE_TIMER_ID");
        public final static Property TimerId = new Property(3, Integer.class, "timerId", false, "TIMER_ID");
        public final static Property TimerType = new Property(4, Integer.class, "timerType", false, "TIMER_TYPE");
        public final static Property DeviceMesh = new Property(5, Integer.class, "deviceMesh", false, "DEVICE_MESH");
        public final static Property Hour = new Property(6, Integer.class, "hour", false, "HOUR");
        public final static Property Minute = new Property(7, Integer.class, "minute", false, "MINUTE");
        public final static Property WorkDay = new Property(8, Integer.class, "workDay", false, "WORK_DAY");
        public final static Property IsEnable = new Property(9, Boolean.class, "isEnable", false, "IS_ENABLE");
        public final static Property Type = new Property(10, String.class, "Type", false, "TYPE");
    };


    public SceneTimerSortDao(DaoConfig config) {
        super(config);
    }
    
    public SceneTimerSortDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SCENE_TIMER_SORT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"SCENE_ID\" INTEGER," + // 1: sceneId
                "\"SCENE_TIMER_ID\" INTEGER," + // 2: sceneTimerId
                "\"TIMER_ID\" INTEGER," + // 3: timerId
                "\"TIMER_TYPE\" INTEGER," + // 4: timerType
                "\"DEVICE_MESH\" INTEGER," + // 5: deviceMesh
                "\"HOUR\" INTEGER," + // 6: hour
                "\"MINUTE\" INTEGER," + // 7: minute
                "\"WORK_DAY\" INTEGER," + // 8: workDay
                "\"IS_ENABLE\" INTEGER," + // 9: isEnable
                "\"TYPE\" TEXT);"); // 10: Type
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SCENE_TIMER_SORT\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, SceneTimerSort entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer sceneId = entity.getSceneId();
        if (sceneId != null) {
            stmt.bindLong(2, sceneId);
        }
 
        Integer sceneTimerId = entity.getSceneTimerId();
        if (sceneTimerId != null) {
            stmt.bindLong(3, sceneTimerId);
        }
 
        Integer timerId = entity.getTimerId();
        if (timerId != null) {
            stmt.bindLong(4, timerId);
        }
 
        Integer timerType = entity.getTimerType();
        if (timerType != null) {
            stmt.bindLong(5, timerType);
        }
 
        Integer deviceMesh = entity.getDeviceMesh();
        if (deviceMesh != null) {
            stmt.bindLong(6, deviceMesh);
        }
 
        Integer hour = entity.getHour();
        if (hour != null) {
            stmt.bindLong(7, hour);
        }
 
        Integer minute = entity.getMinute();
        if (minute != null) {
            stmt.bindLong(8, minute);
        }
 
        Integer workDay = entity.getWorkDay();
        if (workDay != null) {
            stmt.bindLong(9, workDay);
        }
 
        Boolean isEnable = entity.getIsEnable();
        if (isEnable != null) {
            stmt.bindLong(10, isEnable ? 1L: 0L);
        }
 
        String Type = entity.getType();
        if (Type != null) {
            stmt.bindString(11, Type);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public SceneTimerSort readEntity(Cursor cursor, int offset) {
        SceneTimerSort entity = new SceneTimerSort( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // sceneId
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // sceneTimerId
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // timerId
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // timerType
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // deviceMesh
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // hour
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // minute
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // workDay
            cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0, // isEnable
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // Type
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, SceneTimerSort entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSceneId(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setSceneTimerId(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setTimerId(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setTimerType(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setDeviceMesh(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setHour(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setMinute(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setWorkDay(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setIsEnable(cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0);
        entity.setType(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(SceneTimerSort entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(SceneTimerSort entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
