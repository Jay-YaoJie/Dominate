package cn.xlink.telinkoffical.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import cn.xlink.telinkoffical.bean.greenDao.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER".
*/
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Account = new Property(1, String.class, "Account", false, "ACCOUNT");
        public final static Property Name = new Property(2, String.class, "Name", false, "NAME");
        public final static Property Password = new Property(3, String.class, "Password", false, "PASSWORD");
        public final static Property Uid = new Property(4, String.class, "Uid", false, "UID");
        public final static Property AuthKey = new Property(5, String.class, "AuthKey", false, "AUTH_KEY");
        public final static Property RefreshToken = new Property(6, String.class, "RefreshToken", false, "REFRESH_TOKEN");
        public final static Property AccessToken = new Property(7, String.class, "AccessToken", false, "ACCESS_TOKEN");
        public final static Property IsVaild = new Property(8, Boolean.class, "isVaild", false, "IS_VAILD");
        public final static Property Type = new Property(9, String.class, "Type", false, "TYPE");
    };


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"ACCOUNT\" TEXT," + // 1: Account
                "\"NAME\" TEXT," + // 2: Name
                "\"PASSWORD\" TEXT," + // 3: Password
                "\"UID\" TEXT," + // 4: Uid
                "\"AUTH_KEY\" TEXT," + // 5: AuthKey
                "\"REFRESH_TOKEN\" TEXT," + // 6: RefreshToken
                "\"ACCESS_TOKEN\" TEXT," + // 7: AccessToken
                "\"IS_VAILD\" INTEGER," + // 8: isVaild
                "\"TYPE\" TEXT);"); // 9: Type
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String Account = entity.getAccount();
        if (Account != null) {
            stmt.bindString(2, Account);
        }
 
        String Name = entity.getName();
        if (Name != null) {
            stmt.bindString(3, Name);
        }
 
        String Password = entity.getPassword();
        if (Password != null) {
            stmt.bindString(4, Password);
        }
 
        String Uid = entity.getUid();
        if (Uid != null) {
            stmt.bindString(5, Uid);
        }
 
        String AuthKey = entity.getAuthKey();
        if (AuthKey != null) {
            stmt.bindString(6, AuthKey);
        }
 
        String RefreshToken = entity.getRefreshToken();
        if (RefreshToken != null) {
            stmt.bindString(7, RefreshToken);
        }
 
        String AccessToken = entity.getAccessToken();
        if (AccessToken != null) {
            stmt.bindString(8, AccessToken);
        }
 
        Boolean isVaild = entity.getIsVaild();
        if (isVaild != null) {
            stmt.bindLong(9, isVaild ? 1L: 0L);
        }
 
        String Type = entity.getType();
        if (Type != null) {
            stmt.bindString(10, Type);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // Account
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // Password
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // Uid
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // AuthKey
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // RefreshToken
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // AccessToken
            cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0, // isVaild
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // Type
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAccount(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPassword(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUid(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAuthKey(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setRefreshToken(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setAccessToken(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setIsVaild(cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0);
        entity.setType(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(User entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(User entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
