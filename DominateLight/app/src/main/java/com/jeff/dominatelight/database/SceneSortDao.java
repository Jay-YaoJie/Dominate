package com.jeff.dominatelight.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.jeff.dominatelight.bean.greenDao.SceneSort;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SCENE_SORT".
*/
public class SceneSortDao extends AbstractDao<SceneSort, Long> {

    public static final String TABLENAME = "SCENE_SORT";

    /**
     * Properties of entity SceneSort.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property SceneId = new Property(2, Integer.class, "sceneId", false, "SCENE_ID");
        public final static Property Brightness = new Property(3, Integer.class, "brightness", false, "BRIGHTNESS");
        public final static Property Temperature = new Property(4, Integer.class, "temperature", false, "TEMPERATURE");
        public final static Property Color = new Property(5, Integer.class, "color", false, "COLOR");
        public final static Property SceneType = new Property(6, Integer.class, "sceneType", false, "SCENE_TYPE");
        public final static Property Actions = new Property(7, String.class, "actions", false, "ACTIONS");
        public final static Property IsShowOnHomeScreen = new Property(8, Boolean.class, "isShowOnHomeScreen", false, "IS_SHOW_ON_HOME_SCREEN");
        public final static Property Type = new Property(9, String.class, "Type", false, "TYPE");
    };


    public SceneSortDao(DaoConfig config) {
        super(config);
    }
    
    public SceneSortDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SCENE_SORT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"SCENE_ID\" INTEGER," + // 2: sceneId
                "\"BRIGHTNESS\" INTEGER," + // 3: brightness
                "\"TEMPERATURE\" INTEGER," + // 4: temperature
                "\"COLOR\" INTEGER," + // 5: color
                "\"SCENE_TYPE\" INTEGER," + // 6: sceneType
                "\"ACTIONS\" TEXT," + // 7: actions
                "\"IS_SHOW_ON_HOME_SCREEN\" INTEGER," + // 8: isShowOnHomeScreen
                "\"TYPE\" TEXT);"); // 9: Type
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SCENE_SORT\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, SceneSort entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        Integer sceneId = entity.getSceneId();
        if (sceneId != null) {
            stmt.bindLong(3, sceneId);
        }
 
        Integer brightness = entity.getBrightness();
        if (brightness != null) {
            stmt.bindLong(4, brightness);
        }
 
        Integer temperature = entity.getTemperature();
        if (temperature != null) {
            stmt.bindLong(5, temperature);
        }
 
        Integer color = entity.getColor();
        if (color != null) {
            stmt.bindLong(6, color);
        }
 
        Integer sceneType = entity.getSceneType();
        if (sceneType != null) {
            stmt.bindLong(7, sceneType);
        }
 
        String actions = entity.getActions();
        if (actions != null) {
            stmt.bindString(8, actions);
        }
 
        Boolean isShowOnHomeScreen = entity.getIsShowOnHomeScreen();
        if (isShowOnHomeScreen != null) {
            stmt.bindLong(9, isShowOnHomeScreen ? 1L: 0L);
        }
 
        String Type = entity.getType();
        if (Type != null) {
            stmt.bindString(10, Type);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public SceneSort readEntity(Cursor cursor, int offset) {
        SceneSort entity = new SceneSort( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // sceneId
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // brightness
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // temperature
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // color
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // sceneType
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // actions
            cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0, // isShowOnHomeScreen
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // Type
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, SceneSort entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSceneId(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setBrightness(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setTemperature(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setColor(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setSceneType(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setActions(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setIsShowOnHomeScreen(cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0);
        entity.setType(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(SceneSort entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(SceneSort entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
