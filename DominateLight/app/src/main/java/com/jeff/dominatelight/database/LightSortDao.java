package com.jeff.dominatelight.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.jeff.dominatelight.bean.greenDao.LightSort;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LIGHT_SORT".
*/
public class LightSortDao extends AbstractDao<LightSort, Long> {

    public static final String TABLENAME = "LIGHT_SORT";

    /**
     * Properties of entity LightSort.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property MacAddress = new Property(2, String.class, "macAddress", false, "MAC_ADDRESS");
        public final static Property FirmwareRevision = new Property(3, String.class, "firmwareRevision", false, "FIRMWARE_REVISION");
        public final static Property MeshAddress = new Property(4, Integer.class, "meshAddress", false, "MESH_ADDRESS");
        public final static Property LightType = new Property(5, Integer.class, "lightType", false, "LIGHT_TYPE");
        public final static Property IsAlone = new Property(6, Boolean.class, "isAlone", false, "IS_ALONE");
        public final static Property IsShowOnHomeScreen = new Property(7, Boolean.class, "isShowOnHomeScreen", false, "IS_SHOW_ON_HOME_SCREEN");
        public final static Property IsAddToDefault = new Property(8, Boolean.class, "isAddToDefault", false, "IS_ADD_TO_DEFAULT");
        public final static Property Type = new Property(9, String.class, "Type", false, "TYPE");
    };


    public LightSortDao(DaoConfig config) {
        super(config);
    }
    
    public LightSortDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LIGHT_SORT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"MAC_ADDRESS\" TEXT," + // 2: macAddress
                "\"FIRMWARE_REVISION\" TEXT," + // 3: firmwareRevision
                "\"MESH_ADDRESS\" INTEGER," + // 4: meshAddress
                "\"LIGHT_TYPE\" INTEGER," + // 5: lightType
                "\"IS_ALONE\" INTEGER," + // 6: isAlone
                "\"IS_SHOW_ON_HOME_SCREEN\" INTEGER," + // 7: isShowOnHomeScreen
                "\"IS_ADD_TO_DEFAULT\" INTEGER," + // 8: isAddToDefault
                "\"TYPE\" TEXT);"); // 9: Type
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LIGHT_SORT\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, LightSort entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String macAddress = entity.getMacAddress();
        if (macAddress != null) {
            stmt.bindString(3, macAddress);
        }
 
        String firmwareRevision = entity.getFirmwareRevision();
        if (firmwareRevision != null) {
            stmt.bindString(4, firmwareRevision);
        }
 
        Integer meshAddress = entity.getMeshAddress();
        if (meshAddress != null) {
            stmt.bindLong(5, meshAddress);
        }
 
        Integer lightType = entity.getLightType();
        if (lightType != null) {
            stmt.bindLong(6, lightType);
        }
 
        Boolean isAlone = entity.getIsAlone();
        if (isAlone != null) {
            stmt.bindLong(7, isAlone ? 1L: 0L);
        }
 
        Boolean isShowOnHomeScreen = entity.getIsShowOnHomeScreen();
        if (isShowOnHomeScreen != null) {
            stmt.bindLong(8, isShowOnHomeScreen ? 1L: 0L);
        }
 
        Boolean isAddToDefault = entity.getIsAddToDefault();
        if (isAddToDefault != null) {
            stmt.bindLong(9, isAddToDefault ? 1L: 0L);
        }
 
        String Type = entity.getType();
        if (Type != null) {
            stmt.bindString(10, Type);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public LightSort readEntity(Cursor cursor, int offset) {
        LightSort entity = new LightSort( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // macAddress
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // firmwareRevision
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // meshAddress
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // lightType
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0, // isAlone
            cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0, // isShowOnHomeScreen
            cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0, // isAddToDefault
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // Type
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, LightSort entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMacAddress(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFirmwareRevision(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMeshAddress(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setLightType(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setIsAlone(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
        entity.setIsShowOnHomeScreen(cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0);
        entity.setIsAddToDefault(cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0);
        entity.setType(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(LightSort entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(LightSort entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
